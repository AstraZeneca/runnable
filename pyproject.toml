[project]
name = "runnable"
version = "0.0.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Vammi, Vijay", email = "vijay.vammi@astrazeneca.com" }
]
requires-python = ">=3.10"
dependencies = [
    "pydantic>=2.10.3",
    "ruamel-yaml>=0.18.6",
    "stevedore>=5.4.0",
    "rich>=13.9.4",
    "dill>=0.3.9",
    "setuptools>=75.6.0",
    "python-dotenv>=1.0.1",
    "typer>=0.17.3",
    "cloudpathlib>=0.20.0",
]

[project.optional-dependencies]
docker = [
    "docker>=7.1.0",
]
notebook = [
    "ploomber-engine>=0.0.33",
]
examples = [
    "pandas>=2.2.3",
]
k8s = [
    "kubernetes>=31.0.0",
]
s3 = [
    "cloudpathlib[s3]"
]
examples-torch = [
    "torch>=2.7.1",
]
ui = [
    "fastapi>=0.95.0",
    "jinja2>=3.1.2",
    "uvicorn>=0.22.0",
]


[dependency-groups]
dev = [
    "pytest-cov>=6.0.0",
    "pytest>=8.3.4",
    "pytest-mock>=3.14.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
]
docs = [
    "mkdocs-section-index>=0.3.9",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.49",
    "mkdocstrings>=0.27.0",
    "mkdocs-click>=0.8.1",
    "mkdocstrings-python>=1.12.2",
]
release = [
    "python-semantic-release>=9.15.2",
]


[tool.uv.workspace]
members = ["extensions/catalog",
        "extensions/job_executor",
        "extensions/nodes",
        "extensions/pipeline_executor",
        "extensions/run_log_store",
        "extensions/secrets",
        "visualization"
]

[tool.uv.sources]
nodes = {workspace = true}
secrets = {workspace = true}
catalog = {workspace = true}
run_log_store = {workspace = true}
pipeline_executor = {workspace = true}
job_executor = {workspace = true}
visualization = {workspace = true}


[project.scripts]
runnable = 'runnable.cli:app'

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
ignore-vcs = true
include = [
  "/runnable",
  "/extensions",
]


# Plugin systems
[project.entry-points.'pipeline_executor']
"local" = "extensions.pipeline_executor.local:LocalExecutor"
"local-container" = "extensions.pipeline_executor.local_container:LocalContainerExecutor"
"emulator" = "extensions.pipeline_executor.emulate:Emulator"
"argo" = "extensions.pipeline_executor.argo:ArgoExecutor"
"mocked" = "extensions.pipeline_executor.mocked:MockedExecutor"
"retry" = "extensions.pipeline_executor.retry:RetryExecutor"

[project.entry-points.'job_executor']
"local" = "extensions.job_executor.local:LocalJobExecutor"
"local-container" = "extensions.job_executor.local_container:LocalContainerJobExecutor"
"mini-k8s-job" = "extensions.job_executor.k8s:MiniK8sJobExecutor"
"k8s-job" = "extensions.job_executor.k8s:K8sJobExecutor"
"emulator" = "extensions.job_executor.emulate:EmulatorJobExecutor"

[project.entry-points.'secrets']
"do-nothing" = "runnable.secrets:DoNothingSecretManager"
"dotenv" = "extensions.secrets.dotenv:DotEnvSecrets"
"env-secrets" = "runnable.secrets:EnvSecretsManager"

[project.entry-points.'catalog']
"do-nothing" = "runnable.catalog:DoNothingCatalog"
"file-system" = "extensions.catalog.file_system:FileSystemCatalog"
"s3" = "extensions.catalog.s3:S3Catalog"
"minio" = "extensions.catalog.minio:MinioCatalog"

[project.entry-points.'run_log_store']
"buffered" = "runnable.datastore:BufferRunLogstore"
file-system = "extensions.run_log_store.file_system:FileSystemRunLogstore"
"minio" = "extensions.run_log_store.minio:MinioRunLogStore"
"chunked-fs" = "extensions.run_log_store.chunked_fs:ChunkedFileSystemRunLogStore"
"chunked-minio" = "extensions.run_log_store.chunked_minio:ChunkedMinioRunLogStore"

[project.entry-points.'pickler']
"pickle" = "runnable.pickler:NativePickler"


[project.entry-points.'nodes']
"task" = "extensions.nodes.task:TaskNode"
"fail" = "extensions.nodes.fail:FailNode"
"success" = "extensions.nodes.success:SuccessNode"
"parallel" = "extensions.nodes.parallel:ParallelNode"
"map" = "extensions.nodes.map:MapNode"
"stub" = "extensions.nodes.stub:StubNode"
"conditional" = "extensions.nodes.conditional:ConditionalNode"

[project.entry-points.'tasks']
"python" = "runnable.tasks:PythonTaskType"
"shell" = "runnable.tasks:ShellTaskType"
"notebook" = "runnable.tasks:NotebookTaskType"
"torch" = "runnable.tasks:TorchTaskType"


# Release configuration
[tool.semantic_release]
commit_parser = "conventional"
major_on_zero = true
allow_zero_version = true
tag_format = "{version}"

[tool.semantic_release.branches.main]
match = "(main|master|release-fix*)"

[tool.semantic_release.branches.alpha]
match = "(alpha-*)"
prerelease = true
prerelease_token = "alpha"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
